import envConfig from "@/config";
import { SigninResponseType } from "@/schemaValidations/auth.schema";
import { normalizePath } from "./utils";
import { redirect } from "next/navigation";

type CustomOptions = RequestInit & {
  baseUrl?: string;
};

const ENTITY_ERROR_STATUS = 422;
const AUTHENTICATION_ERROR_STATUS = 401;

type EntityErrorPayload = {
  message: string;
  errors: {
    field: string;
    message: string;
  }[];
};

export class HttpError extends Error {
  status: number;
  payload: {
    message: string;
    [key: string]: any;
  };
  constructor({ status, payload, message = 'L·ªói HTTP' }: { status: number; payload: any, message?: string }) {
    super(message);
    this.status = status;
    this.payload = payload;
  }
}

export class EntityError extends HttpError {
  status: typeof ENTITY_ERROR_STATUS;
  payload: EntityErrorPayload;
  constructor({
    status,
    payload,
  }: {
    status: typeof ENTITY_ERROR_STATUS;
    payload: EntityErrorPayload;
  }) {
    super({ status, payload, message : 'L·ªói th·ª±c th·ªÉ' });
    this.status = status;
    this.payload = payload;
  }
}

/* 
  t·∫°o ƒë·ªëi t∆∞·ª£ng n√†y ƒë·ªÉ l∆∞u gi√° tr·ªã 
  sessionToke 
  expiresAt 
  
  objec n√†y d√πng ƒë·ªÉ l∆∞u 
  sesstionToken 
  expriersAt
  of 
  refeshToken
  acceptToken
  ƒë√≠nh k√®m v√†o header
  m·ªói khi 'useClient' next client (UI component) call api ƒë·∫øn server

  Tr∆∞·ªùng h·ª£p d√πng
  refeshToken
  acceptToken
  ·ªü slideSession 
  d√πng useEffect l·∫•y ra acceptToken -> decode ƒë·ªÉ l√°y ra expriers so s√°nh v·ªõi newDate() n√†y hi·ªán t·∫°i < 1h
  d√πng refeshToken call api ƒë·∫øn server set l·∫°i expires v√† l∆∞u v√†o object n√†y v√† next server reponse v·ªÅ l∆∞u v√†o header cookie

  c√°ch 2
  next client call api(truy·ªÅn refesh token) ƒë·∫øn next server v·ªõi route= /api/refesh-token, 
  next server call api(truy·ªÅn refesh token) server  v·ªõi route = /auth/refesh-token
  next server nh·∫≠n reponse t·ª´ server set v√†o cookie
  http handle l∆∞u v√†o object next client
 */
// class SessionToken {
//   private token = "";
//   private _expiresAt = new Date().toISOString();
//   get value() {
//     return this.token;
//   }
//   set value(token: string) {
//     if (typeof window === "undefined") {
//       throw new Error("Cannot set token on the server side");
//     }
//     this.token = token;
//   }
//   get expiresAt() {
//     return this._expiresAt;
//   }
//   set expiresAt(expireAt: string) {
//     if (typeof window === "undefined") {
//       throw new Error("Cannot set token on the server side");
//     }
//     this._expiresAt = expireAt;
//   }
// }

// export const clientSessionToken = new SessionToken();

/* 
  clientLogoutRequest = null
  khi kh√¥ng th·ª±c hi·ªán call api logout
clientLogoutRequest = promise
  khi ƒëang th·ª±c hi·ªán request logout tr·∫°n th√°i pendding
t·∫°o bi·∫øn n√†y ƒë·ªÉ logout 1 l·∫ßn
 */
// let clientLogoutRequest: null | Promise<any> = null;
//isClient = true khi ·ªü m√¥i tr∆∞·ªùn 'useClient UI component con next server or component handle login'
export const isClient = typeof window !== 'undefined';
const request = async <Response>(
  method: "GET" | "POST" | "PUT" | "DELETE",
  url: string,
  options: CustomOptions = {}
) => {
  // const { body, headers, baseUrl, ...restOptions } = options;
  // console.log("üöÄ ~ baseUrl:", baseUrl)


  // console.log('body', body)

  let body: FormData | string | undefined = undefined
  if (options?.body instanceof FormData) {
    body = options.body
  } else if (options?.body) {
    body = JSON.stringify(options.body)
  }
  // // N·∫øu kh√¥ng truy·ªÅn baseUrl (ho·∫∑c baseUrl = undefined) th√¨ l·∫•y t·ª´ envConfig.NEXT_PUBLIC_API_ENDPOINT
  // // N·∫øu truy·ªÅn baseUrl th√¨ l·∫•y gi√° tr·ªã truy·ªÅn v√†o, truy·ªÅn v√†o '' th√¨ ƒë·ªìng nghƒ©a v·ªõi vi·ªác ch√∫ng ta g·ªçi API ƒë·∫øn Next.js Server
  const baseUrl =
    options?.baseUrl === undefined
      ?  envConfig.NEXT_PUBLIC_API_ENDPOINT
      :  options.baseUrl 
  // const fullUrl = url.startsWith("/") ? `${baseUrl}${url}` : `${baseUrl}/${url}`;
  const fullUrl = `${baseUrl}/${normalizePath(url)}`;
  console.log('fullUrl', fullUrl);
  const baseHeaders: {
    [key: string]: string
  } =
    body instanceof FormData
      ? {}
      : {
          'Content-Type': 'application/json'      
        }
  if (isClient) {
    const accessToken = localStorage.getItem('accessToken');
    if (accessToken) {
      baseHeaders.Authorization = `Bearer ${accessToken}`
    }
  }


  const res = await fetch(fullUrl, {
    ...options,
    headers: {
      ...baseHeaders,
      ...options?.headers
    } as any,
    body,
    method
  })

  const payload: Response = await res.json();
  const data = { status: res.status, payload };


  /* 
    Interceptor x·ª≠ l√Ω request v√† response tr∆∞·ªõc khi tr·∫£ v·ªÅ cho component
    Interceptor l√† n·ªùi ch√∫ng ta x·ª≠ l√Ω request v√† response tr∆∞·ªõc khi tr·∫£ v·ªÅ cho ph√≠a component
    N·∫øu x·∫£y ra l·ªói
    ch·ªó n√†y b·∫Øng l·ªói 
    authencation

   */
  // if (!res.ok) {
  //   if (res.status === ENTITY_ERROR_STATUS) {
  //     throw new EntityError(
  //       data as {
  //         status: 422;
  //         payload: EntityErrorPayload;
  //       }
  //     );
  //   } else if (res.status === AUTHENTICATION_ERROR_STATUS) {
  //     //X·ª≠ l√≠ bu·ªôc logout ·ªü client
  //     /* 
  //       nh·∫£y qu·∫£ route next server cal api next server to server logout
  //      */
  //     if (isClient) {
  //       /* 
  //         n·∫øu logut kh√¥ng = null
  //        */
  //       if (!clientLogoutRequest) {
  //         /* 
  //           g√°n logout = 1 call api
  //           bu·ªôc logout trong tr∆∞·ªùng h·ª£p token h·∫øt h·∫°n khi ng∆∞·ªùi d√πng 1 tg k ƒëƒÉng nh·∫≠p
  //           server s·∫Ω xo√° ƒëi token 
  //           ƒëƒÉng nh·∫≠p tr·ªü l·∫°i s·∫Ω c·∫•p m·ªõi sessionToken k√®m expriersAt m·ªõi
  //           x·ª≠ l√Ω ·ªü 'useClient' (next client) tr∆∞·ªõc 
  //          */
       
  //         await fetch("/api/auth/logout", {
  //         method: "POST",
  //         body: null,
  //         headers: {
  //           ...baseHeaders,
  //         } as any,
  //         })
  //         try {
  //           await clientLogoutRequest;
  //         } catch (error) {
  //           console.log("üöÄ ~ error:", error);
  //         } finally {
  //           localStorage.removeItem('accessToken')
  //           // localStorage.removeItem('sessionTokenExpiresAt')

  //           /* 
  //             set object sessionToke  = ''
  //             expiresAt n√†y h√¥m nay
  //            */
  //           // clientSessionToken.value = "";
  //           // clientSessionToken.expiresAt = new Date().toUTCString();
  //           /* 
  //             tr·∫£ logout v·ªÅ tr·∫°ng th√°i null
  //            */
  //           clientLogoutRequest = null;
  //           location.href = "/login";
  //         }
  //       }
  //       /*
  //         ·ªû next server ƒë√° qua logout client v√† truy·ªÅn session v√¨ next server kh√¥ng l∆∞u cookie 
  //         cookie ƒë∆∞·ª£c l∆∞u ·ªü browser next server ch·ªâ call api ƒë·∫øn server v√† tr·∫£ v·ªÅ response t·ª´ server
  //         next server ·ªü api/auth
  //         next server s·∫Ω ƒë∆∞·ª£c g·ªçi t·ª´ 'user client' next clien (UI compont) th√¥ng qua http n·∫øu uslBase = '' r·ªóng
  //         Ki·ªÉm tra sessionToken trong object === param truy·ªÅn qua th√¨ call api logout 
  //         nh·∫£y v√†o route next server call api next server to server xo√° cookie
  //        */
  //     } else {
  //       const accessToken = (options?.headers as any)?.Authorization.split(
  //         "Bearer "
  //       )[1];
  //       redirect(`/logout?accessToken=${accessToken}`);
  //     }
  //   } else {
  //     console.log(data);
  //     throw new HttpError(data);
  //   }
  // }
  //Client
  /*
    ch·ªó n√†y x·ª≠a l√Ω khi file http ch·∫°y ·ªü client (UI component)
    ch·∫°y ·ªü client browser
    window = 'undefind': ch·∫°y ·ªü next server
    window !== 'undefint': ch·∫°y ·ªü file c√≥ 'use client' next client
   */
  // if (isClient) {
  //   // Automatically handle session token management

  //   if (
  //     ["auth/login", "auth/register"].some(
  //       (item) => item === normalizePath(url)
  //     )
  //   ) {
  //     /* 
  //     set object sesstionToken = res.token tr·∫£ v·ªÅ t·ª´ server
  //     set object expiersAt = res.expersAt t·ª´ res server tr·∫£ v·ªÅ
  //      */
  //     // clientSessionToken.value = (payload as SigninResponseType).data.token;
  //     // clientSessionToken.expiresAt = (payload as SigninResponseType).data.expiresAt;

  //     const { token } = (payload as SigninResponseType).content;
  //     console.log('token', token);
  //     localStorage.setItem('accessToken', token);
  //   } else if ("auth/logout" === normalizePath(url)) {
  //     /* 
  //       ng∆∞·ª£c l·∫°i logout th√¨ xo√° gi√° tr·ªã
  //      */
  //     // clientSessionToken.value = "";
  //     // clientSessionToken.expiresAt = new Date().toUTCString();

  //     localStorage.removeItem('accessToken');
  //   }
  // }

  return data;
};

const http = {
  get<Response>(url: string, options?: Omit<CustomOptions, "body">) {
    return request<Response>("GET", url, options);
  },
  post<Response>(
    url: string,
    body: any,
    options?: Omit<CustomOptions, "body">
  ) {
    return request<Response>("POST", url, { ...options, body });
  },
  put<Response>(url: string, body: any, options?: Omit<CustomOptions, "body">) {
    return request<Response>("PUT", url, { ...options, body });
  },
  delete<Response>(url: string, options?: Omit<CustomOptions, "body">) {
    return request<Response>("DELETE", url, options);
  },
};

export default http;

//---------------------------------------------- axios ----------------------------------------------
